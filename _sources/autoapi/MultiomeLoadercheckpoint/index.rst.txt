:orphan:

:py:mod:`MultiomeLoader-checkpoint`
===================================

.. py:module:: MultiomeLoader-checkpoint


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   MultiomeLoader-checkpoint.MultiOmicsDataset




.. py:class:: MultiOmicsDataset(input_data, sample_names=None, side_data=None, normalization_factors=None, model_matrix=None, initialization_input=None, to_tensor=None, use_cuda=False, load_on_cuda=None, transform=None, transform_side=None, transform_aux=None)


   Bases: :py:obj:`torch.utils.data.Dataset`

   An abstract class representing a :class:`Dataset`.

   All datasets that represent a map from keys to data samples should subclass
   it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a
   data sample for a given key. Subclasses could also optionally overwrite
   :meth:`__len__`, which is expected to return the size of the dataset by many
   :class:`~torch.utils.data.Sampler` implementations and the default options
   of :class:`~torch.utils.data.DataLoader`.

   .. note::
     :class:`~torch.utils.data.DataLoader` by default constructs a index
     sampler that yields integral indices.  To make it work with a map-style
     dataset with non-integral indices/keys, a custom sampler must be provided.

   .. py:method:: __len__()


   .. py:method:: __getitem__(idx)



