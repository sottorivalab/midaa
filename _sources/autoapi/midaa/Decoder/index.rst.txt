:orphan:

:py:mod:`midaa.Decoder`
=======================

.. py:module:: midaa.Decoder


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   midaa.Decoder.Decoder




.. py:class:: Decoder(input_size, z_dim, hidden_dims_dec_common, hidden_dims_dec_last, output_types_input, layers_independent_types=None, input_size_aux=None, output_types_side=None, hidden_dims_dec_last_side=None, layers_independent_types_side=None, linearize=False, image_size=[256, 256], kernel_size=3, stride=1, padding=1, pool_size=2)


   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(z)



